### 리스트 돌리기 
from copy import deepcopy 
def rotate(board):
    # tmp = deepcopy(board)
    n = len(board)
    m = len(board[0])
    tmp = [[0 for _ in range(n)] for _ in range(m)]
    for i in range(n):
        for j in range(m):
            tmp[j][n-i-1] = board[i][j]
    return tmp

### 진법
def notation(n, base):
  s = "0123456789ABCDEF"
  q, r = divmod(n, base)
  return s[r] if q==0 else notation(q, base) + s[r]
    # tmp = deepcopy(board)
    n = len(board)
    m = len(board[0])
    tmp = [[0 for _ in range(n)] for _ in range(m)]
    for i in range(n):
        for j in range(m):
            tmp[j][n-i-1] = board[i][j]
    return tmp
gcd(최대공약수)
return n
gcd(최대공약수)

### 유클리드 호제법
def gcd(n, m):
  if n > m,
  while m>0:
    n, m = m, n%m
return n

def gcd(n, m):
  return n if m == 0 else gcd(m, n%m)
gcd(n, m) if n>m else gcd(m, n)
- 최소공배수
lcm(최소공배수) = n * m // gcd(최대공약수)

### 맵에서 중복된 값은 value를 증가시킨다
TreeMap.put(number,tm.getOrDefault(number, 0) + 1);


### Combination N개중 R개 뽑기
public class Main {
	public static void main(String[] args) throws Exception {
		
		int[] list = {0,1,2};
		int n = list.length;
		int r = 2;
		HashSet<Integer> set = new HashSet<>();
		combination(list, n, r, 0, set);
	}

	private static void combination(int[] list, int n, int r, int index, HashSet<Integer> set) {
		if(r==0) {
			for(int i : set) {
				System.out.print(i+" ");
			}System.out.println();
			return;
		}
		
		for(int i=index; i<n; i++) {
			set.add(i);
			combination(list, n, r-1, i+1, set);
			set.remove(i);
		}
		
	}
}


### Java Comparator 쓴 문제!!
public class Main {
	public static void main(String[] args) throws Exception {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		// 값 입력 
		int N = Integer.parseInt(br.readLine());
		String[][] arr = new String[N][4];
		
		for (int i = 0; i < N; i++) {
			arr[i]=br.readLine().split(" ");
		}
		
		Arrays.sort(arr,new Comparator<String[]>() {
			
			@Override
			public int compare(String[] o1, String[] o2) {
			
				// 내림차순
				if(Integer.parseInt(o1[1]) < Integer.parseInt(o2[1])){
					return 1;
				}else if(Integer.parseInt(o1[1]) > Integer.parseInt(o2[1])){
					return -1;
					
				// 오름차순
				}else if(Integer.parseInt(o1[2]) < Integer.parseInt(o2[2])){
					return -1;
				}else if(Integer.parseInt(o1[2]) > Integer.parseInt(o2[2])){
					return 1;
					
				// 내림차순
				}else if(Integer.parseInt(o1[3]) < Integer.parseInt(o2[3])){
					return 1;
				}else if(Integer.parseInt(o1[3]) > Integer.parseInt(o2[3])){
					return -1;
				
				// 이름 사전순
				}else{
					return o1[0].compareTo(o2[0]);
				}
			}
		});
		
		for (int i = 0; i < N; i++) {
			sb.append(arr[i][0]).append("\n");
		}
		
		System.out.println(sb);
		
		br.close();
		System.exit(0);
	}
}
